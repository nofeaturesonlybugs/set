/develop

    + Breaking change (impact=low)
        Mapper.Map returns Mapping instead of *Mapping.
    
    + Breaking change (impact=low)
        Method receivers on type Mapping refactored to value-receivers instead of pointer-receivers.
        None of the existing methods mutate the Mapping so this change should be low impact.

    + Breaking change (impact=low)
        BoundMapping is now a struct and no longer an interface type.
        Migration steps:
            Probably none.
        Reason:
            When BoundMapping as an interface was originally created I envisioned multiple
            such mapping types that would provide different kinds of struct access.  However it has
            become apparent that:
                1) Not many such types have been warranted or needed and
                2) PreparedMapping -- the closest type to warrant such an interface -- does not have
                    a method set matching BoundMapping.

    + Breaking change (impact=high)
        Mapper.Bind returns (BoundMapping, error) instead of BoundMapping.
        Migration steps:
            Existing code calling Mapper.Bind should now check the returned error value and
            discard or abandon the use of the BoundMapping if err is non-nil.
        Reason:
            The previous version of set allowed Mapper.Bind to be called with an unaddressable
            value which would result in all (or most) methods on BoundMapping to return an error.
            Changing the Mapper.Bind signature allows this checking to be performed when
            a BoundMapping is being created and lessens the burden on BoundMapping methods from
            performing this check and returning the proper error.
    
    + BoundMapping
        + Rebind allows argument to be reflect.Value if-and-only-if the value stored in the
        reflect.Value is compatible with the type used to created the BoundMapping.

    + Add types Slice and SlicePtr
        Slice facilitates element creation and appending to []T.
        SlicePtr ensures an interface{} value is *[]T or pointer chain to []T.  Deserializers needing
        to deserialize data into a caller-provided slice can use SlicePtr to simplify validating
        the destination as well as element creation and addition to the []T.        

0.4.0
    + set.Mapper
        + Add TaggedFieldsOnly field.
            TaggedFieldsOnly=false means no change in behavior.
            TaggedFieldsOnly=true means only exported fields with struct tags are mapped.
            
0.3.2
    + Bug fix.  set.V(&dst).To(src) would fail when dst and src represented the same class of data
        but with different bit sizes.  For example set.V(&i64).To(i8(12)) would return an error stating
        "conversion from int-to-int" is not supported.  This has been fixed for floats, ints, and uints
        and the conversion now returns an error if the assignment would result in overflow into the target.
        
0.3.1
    + Bug fix.  set.V().To() failed when the types were different but underlying kinds were the same.
        For example the following would fail:
            type NewT string
            var dst NewT                // Type is NewT and kind is string.
            src := "A regular string."  // Type is string and kind is string.
            set.V(&dst).To(src)         // Would result in unable to coerce string-to-string error.

0.3.0
    + Breaking change migration (impact=low).
        set.BoundMapping.Assignables() has a second argument.  You can set this argument to nil
        or pre-allocate a slice with same length as the fields argument.

    + set.BoundMapping
            + Add method Copy().
            + Add method Fields().
            + Breaking change: Assignables() (and Fields()) accept a
            pre-allocated slice as their second argument.
    
    + set.Mapper
            + Bug fix.  When iterating struct fields unexported (aka
            private) fields are implicitly ignored.  Previously they were
            adding to the mapping and could result in errors later when
            using Mapping or BoundMapping.
    
    + set.Mapping
            + Add field Keys.
            + Add field StructFields.
    
    + set.Value
            + Add method Copy().

0.2.3
    + Bug fix.  BoundMapping.Assignables() did not work as expected when attempting to Scan()
        results from a database query that returned NULL for columns even if the destination struct
        field was a pointer.  The error was the previous implementation always follows and instantiates
        pointers so the Scan() was receiving a *T when it required a **T.

    + Add feature.  Mapper.TreatAsScalar can be used to treat certain types as if they were
        scalars when generating mappings.

0.2.2
    + Add go.mod

0.2.1
    + No API changes.
    
0.2.0
    + Add Mapper, Mapping, BoundMapping
    + Add TypeInfo, TypeInfoCache
    + Add global TypeCache as an instance of TypeInfoCache.

0.1.2
    + Clean golint warnings; some small refactoring.

0.1.1
    + Refactoring and increase code coverage.

0.1.0
    + Add types:
        + Value - sets data to scalars, slices, and structs with type coercion if necessary.
        + Getter - acts as value lookup when filling structs.
        + Field - intermediate type for iterating struct fields.
